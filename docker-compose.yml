# docker-compose.yml
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: predictions_postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-admin123}
      POSTGRES_DB: ${POSTGRES_DB:-predictions_db}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app_network

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: predictions_pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@admin.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - app_network

  # MLflow Server
  mlflow:
    build:
      context: ./mlflow
      dockerfile: Dockerfile.mlflow
    container_name: mlflow_server
    restart: always
    ports:
      - "5000:5000"
    environment:
      - BACKEND_STORE_URI=postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-admin123}@postgres:5432/${POSTGRES_DB:-predictions_db}
      - ARTIFACT_ROOT=/mlflow/artifacts
    volumes:
      - mlflow_artifacts:/mlflow/artifacts
    depends_on:
      - postgres
    networks:
      - app_network
    command: >
      mlflow server
      --backend-store-uri postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-admin123}@postgres:5432/${POSTGRES_DB:-predictions_db}
      --default-artifact-root /mlflow/artifacts
      --host 0.0.0.0
      --port 5000

  # Streamlit App
  streamlit:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: streamlit_app
    restart: always
    ports:
      - "8501:8501"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-admin123}@postgres:5432/${POSTGRES_DB:-predictions_db}
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    volumes:
      - ./app_with_db.py:/app/app_with_db.py
      - ./database:/app/database
      - ./requirements.txt:/app/requirements.txt
    depends_on:
      - postgres
      - mlflow
    networks:
      - app_network

volumes:
  postgres_data:
  mlflow_artifacts:

networks:
  app_network:
    driver: bridge